-- FUNCTION: public.tr_fc_animalproducts_create_update()

-- DROP FUNCTION public.tr_fc_animalproducts_create_update();

CREATE FUNCTION public.tr_fc_animalproducts_create_update()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF
AS $BODY$
DECLARE
	v_unit varchar(50);
	
BEGIN
	SELECT "unit"
	  INTO v_unit
	  FROM public."Products"
	 WHERE "Products"."id" = NEW."ProductId";
	 
	IF(v_unit = 'KG' AND NEW."weight"<1) THEN
			RAISE EXCEPTION 'Products in KG must have weight';
	END IF;
	 
	IF(TG_OP = 'INSERT') THEN
		IF (NEW."quantity" <1) THEN
			RAISE EXCEPTION 'Quantity cannot be lower than 1';
		END IF;
		
		NEW."quantityAvailable" = NEW."quantity";
		
	ELSIF (TG_OP = 'UPDATE') THEN
		IF(OLD."id"<>NEW."id") THEN
			RAISE EXCEPTION 'AnimalProducts.id cannot be changed';
		END IF;
		IF(OLD."createdAt"<>NEW."createdAt") THEN
			RAISE EXCEPTION 'AnimalProducts.createdAt cannot be changed';
		END IF;
		IF(OLD."ProductId"<>NEW."ProductId") THEN
			RAISE EXCEPTION 'AnimalProducts.ProductId cannot be changed';
		END IF;
		IF(OLD."AnimalId"<>NEW."AnimalId") THEN
			RAISE EXCEPTION 'AnimalProducts.AnimalId cannot be changed';
		END IF;
		IF(OLD."weight"<>NEW."weight") THEN
			RAISE EXCEPTION 'AnimalProducts.weight cannot be changed';
		END IF;
		IF(OLD."quantityAvailable"<>NEW."quantityAvailable") THEN
			RAISE EXCEPTION 'AnimalProducts.quantityAvailable cannot be changed';
		END IF;
		
		IF(NEW."quantity" > OLD."quantity") THEN
			NEW."quantityAvailable" = OLD."quantityAvailable" + (NEW."quantity" - OLD."quantity");
		ELSIF (NEW."quantity" > OLD."quantity") THEN
			NEW."quantityAvailable" = OLD."quantityAvailable" - (OLD."quantity" - NEW."quantity");
		END IF;
	END IF;
	RETURN NEW;

END;
$BODY$;

ALTER FUNCTION public.tr_fc_animalproducts_create_update()
    OWNER TO postgres;
